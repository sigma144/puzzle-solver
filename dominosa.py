from solver import GridSolver, NumberGridState

class DominosaState(NumberGridState):
    def __init__(self, grid, x, y, nums, counts):
        super().__init__(grid, x, y)
        self.nums = nums
        self.counts = [row[:] for row in counts]
    def __repr__(self):
        string = ""
        for y, row in enumerate(self.grid):
            for x, char in enumerate(row):
               string += str(chr(self.nums[y][x] - 10 + ord('A')) if self.nums[y][x] > 9 else self.nums[y][x]) if char == 0 else str(char)
            string += "\n"
        return string
    def get_count(self, x, y, x2, y2):
        if not self.on_grid(x2, y2): return -1
        if self.grid[y2][x2] != 0: return -1
        num1, num2 = self.nums[y][x], self.nums[y2][x2]
        if num2 < num1: num1, num2 = num2, num1
        return self.counts[num1][num2]
    def set_count(self, x, y, x2, y2, val):
        if not self.on_grid(x2, y2): return -1
        if self.grid[y2][x2] != 0: return
        num1, num2 = self.nums[y][x], self.nums[y2][x2]
        if num2 < num1: num1, num2 = num2, num1
        self.counts[num1][num2] = val
    def decr_count(self, x, y, x2, y2, amount = -1):
        if not self.on_grid(x2, y2): return
        if self.grid[y2][x2] != 0: return
        num1, num2 = self.nums[y][x], self.nums[y2][x2]
        if num2 < num1: num1, num2 = num2, num1
        self.counts[num1][num2] += amount
    def place(self, x, y, x2, y2):
        if not self.on_grid(x2, y2):
            return False
        if self.grid[y2][x2] != 0:
            return False
        if self.get_count(x, y, x2, y2) == -1:
            return False
        offsets1 = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]
        offsets2 = [(x2-1, y2), (x2+1, y2), (x2, y2-1), (x2, y2+1)]
        offsets1.remove((x2, y2))
        offsets2.remove((x, y))
        for x3, y3 in offsets1:
            if self.get_count(x, y, x3, y3) == 1:
                return False
            self.decr_count(x, y, x3, y3)
        for x3, y3 in offsets2:
            if self.get_count(x2, y2, x3, y3) == 1:
                return False
            self.decr_count(x2, y2, x3, y3)
        if x2 < x:
            self.grid[y][x] = '>'
            self.grid[y2][x2] = '<'
        if x2 > x:
            self.grid[y][x] = '<'
            self.grid[y2][x2] = '>'
        if y2 < y:
            self.grid[y][x] = 'v'
            self.grid[y2][x2] = '^'
        if y2 > y:
            self.grid[y][x] = '^'
            self.grid[y2][x2] = 'v'
        self.set_count(x, y, x2, y2, -1)
        return True

class DominosaSolver(GridSolver):
    def solve(self, board):
        nums = []
        i = 0
        while i < len(board):
            if board[i] == '[':
                for i2,c2 in enumerate(board[i+1:]):
                    if c2 == ']':
                        nums.append(int(board[i+1:i+1+i2]))
                        i += i2+2
                        break
            else:
                nums.append(int(board[i]))
                i += 1
        length = 0
        for i in range(4, len(nums)):
            if i*(i+1) == len(nums):
                length = i; break
        nums = [[nums[y*(length+1)+x] for x in range(length+1)] for y in range(length)]
        counts = [[0 for _ in range(len(nums[_2])-1)] for _2 in range(len(nums))]
        grid = [[0 for _ in row] for row in nums]
        starting_state = DominosaState(grid, 0, 0, nums, counts)
        for y in range(len(nums)):
            for x in range(len(nums[y])):
                starting_state.decr_count(x, y, x+1, y, 1)
                starting_state.decr_count(x, y, x, y+1, 1)
        print("Starting state: \n" + str(starting_state))
        self.solve_recursive(starting_state)
    def get_next_states(self, state):
        states = []
        offsets = [(1, 0), (0, 1), (-1, 0), (0, -1)]
        for dx, dy in offsets:
            new_state = DominosaState(state.grid, state.x, state.y, state.nums, state.counts)
            if new_state.place(state.x, state.y, state.x+dx, state.y+dy):
                states.append(new_state)
        return states
    def iterate_state(self, state):
        #return False
        return self.iterate_valid_placements(state)

#3x3 Dominosa Normal Puzzle ID: 3,643,185
puzzle_easy = '10230132201332310021'
#7x7 Dominosa Normal Puzzle ID: 1,561,500
puzzle_medium = '174002272575767666033155047420327642570653403572265014133443611265301411'
#15x15 Dominosa Normal Puzzle ID: 6,160,683
puzzle_hard = '9965[15][10]0[14][15]83284[11]334[13][11][15][15]10[12]587273[14]5[13][11]4[11][13]54573[14][14][10][13][10]65[10]60[14]4[14][14]824094[15]8[12]6[14][15][15]340[13][10]114365[14]1[10]42126[11][12]9[10]04[10]2552[12][12]140[15]6863501[13]37[13][13]996[10]5781326[13][12][12]70[13]87971[15]0[10]614[13][12]02[14]6036[15][15]342383281[12]18127[10]5[14]5[12]9[15]4[13]7[11]7[11][15]0[12][15]99[14]2[14][10]99[14]760[14]9[11][13][14]4[12][10][15][10]120758[13]86[11][12]789[12][11][11]775818656[11]02[12][14][11]2[11][15]4[11][11]7[10]30[13][13]1[11][13]2[10][10]99533[12]18[12]9[15]'
#Special Daily Dominosa - Mar 03, 2022
puzzle_ultra = '[22][21]7[19][11][17][18][16][24]03[23]0[17][11]50[14][17]3[10][22][21]07[15][22][18][12]1[21][25][10][15]6[17]927[11][24][24][12][10]8[23]39[23]18[17]8[22]57[20]9[14]654[12]3[12][13][20]02[20][24][25][20][19][19][15][16]442[12]8[23][12][21]0[20][21]3[16][17][15]7[23]42[18][21][11][14][17]62[21][14][23][13][16]9[25][24]0[18][25][19][10][24]6[21]5[20]853[22][24][20]9[12]5[19][12][25][25][22][12][15][15][16]3[20]78[24][15]1[16]2[23]0[13]1211[19][15][10][25][10]8[25][24][10][23][24]88[13]8[22][13][24]7[16][20]6[13]1[20][13][12][15][13][23][23]6[25]0[24][19]5[18][21][24][17][21][18][23]6[10][17]34[12][25][22]64[24][20]65[11]2[22][12][21]8[21][23]1[24]678[11][15][11]3[22][11][19]6[19]48[15]1[25]4[25]0[21][11][17][10]1[11][13][15][18][16]5[16][14][20][18]6[10][16][16][11][18][14][13]9[20]7[19][23]3[12]0[12][11][18][13]27[13][25][14][18][10][21]4[16][10][11][14][25][23][19]7[21]5[12][22][14]5[14][12][16]97[22]6[20][15][17]4[21][11][19]6[24]9[13]4[19]042[11]2[14][16][20][13][13][10][12]47[11]264[13][23][19]7[17]82[18]94[11][24][13][16]5[13]2[14]096[20]31[19][18]55[17]3[24]59[20][11]1865[19][13]3[23]4[15][18][12][18]0[14]9[18][19]9[10]0[13]1[24][16][14][21][19][18]6[10]86[25]2885[12]1[20]88[25]8[11][21][15][17][20]93[15][14][25][22][25][10][15]0[23][16][17][24][12][16][23]4[22]2[16][11]065[23][13][22][10][15][13][16]5[17]3[22]685728[10]14[13][19][15]9[11][21][10][22]34[21]32[10][14]41[15][18][15][10]79[14]24[19]6[18]5[23][23][25][13][14][22]9[11][12]9[18][19][24][18][25][14]15[24][23][23][21]183[15][13][18][22]04[10][15][25]1[25][25][21][20][20][11]9[16][17][17]9[15][22][22][17][11][17][16][10]3[17][19]678[21]6[24][17][21][16][19]72[20][17][14][11][16]00[14][19][17]203[12][24]2[24]30697[21][25]9949[20]2[22][20][14][16][25][22]55[20]08[12]771[20][18]142[16][24][21][15][16]73[12]67[23]45[21]2293[22]9[10][10][10][18][24][14][14][11]80[17][13][20][17][23][19]3[19]71[18][10]10[22]1[11]2[14][22]003[15]5[18][12]71[25][12]1[25]53[22]1[14][17][19]64[14]3[18][13]97[15]7[23]4[23][12]'
#Special Monthly Dominosa - Mar 01, 2022
puzzle_ultra2 = '[35][15]4[21]7[29][28][33][18][19][12][23][12][36]44[17][28][15][11][23][32][36]3[12][21][16][17][12][35]9[22]86[36][24][16][21]35[17][18][21]05[13][21][29]72[27][30][26][16]60[13][27][35][10]52[26]7[39][25][17][37][39][30][12]0[28][10][12][27]917[10][19]0[22]8[14][16]8[23][10][24][22][27][18][18][26][21][27][32]1[13][25][12][34]0[21][25][10][11][15][12][39][26][30][16][16]0[39][27][28][31]4[17][17][13][26][14][34][20]65[24][36]5[24][22][28][40][15]4[39][14]8[40][26][39][10]90[16]25[11][22][19][12][36][34][26][21][24][12][40][10]8[35][13]7[14]2[36][25][18][14][16][20][30][29]2[11][29][24][26]8[31][23]6[32][38][36]471[13][39][28][19][13][26][36][28][17][12][23][19][11][27][15][22][26][24][17]030[14][39][33][39][27][26]3[32][25][14][15][38][30]550[23][34][36][10]0[16][19][30][17]6[20][40][22][21][35]75[25][17][36][23][35]3[30][16][19][29]3973[23][31][12][25][16]34[34][24][19][20]09[30][22]0[32][24][13]4[34]1[25][29]5[14][30][32]0[24][38][31][35][34][40][40][13][12]5[39][22][38]5[18][36][34][35][22][24][38][22][14][20][31][11][21]6[40][31][26][39][28][20][38][40][35][30]2[17][33][14][18][18][22][21][12][18][19][32][31]75[37][12][26][22][32][11][11][30][30][34][18]1[39]21[34][23][19][38][27][38][10][13][28]9[19][32][33][23][25][39][25][12][23][40][19]55[13][34][35][31][17][29]3[27][23][28][10][40][22][20][13][29][36][13][22][30][17][27][25][40][28][36][18][13][37][37][21]9[13][18][40][25][37][22]6[31][38]8[15][29]3[21][27][22][12][21][31][11][33][10][37][17][37]5[24][17][24][39]4[30][32]70[33][29][24][15][33][29][19]88[24][36][10][28][11][14][29][19][37][24][12][11][27][13][15][30]234[31][39]6[36]15[34][11]5[16][38][34][30][11]65[35][30]38[28][28][28][22][14]6[15][40][28][22][12][12][31][16][30]03[12][34][32][29][37]8[24]6[38][24][21][21][21]1[16][23][19][26]1[34][24][25][33][22][16][26][32]12[33][13][22]99[22][23]3[14][22][19]83[33][37][38][34]65[28][37][26][33]3[36][16][27][18][10][20][12][13][17][15]4[20]476[31]5[19][37][29]468[26][26]7[24][29][15][16][19]137[13][40][12][38][32]6[39][25][37][19][25]1[25]2[14][31][38]769[31][35][20][21][31][28][27][11][39][12][18][31]1[31][38][19]8[21][29][22]9[35]6[23]2[36][19]57[16][30][28][29][35][29][29]9[36][22][24]6[21]6[21]475[38][14][21][21][35][17][26][17][25][35][37][14][13][29][40]9[10]8[18][12][10]3[33][24][27][37]8[10][26][27][35][20][11]5[40]1[38][11][25][23][24][18][20][34]9[33]24[11][35][11]0[12][20][16][11][25][33][39][27]820[29]8[16][16]1[14][34][20][14][14]2[37][32][30][32][32]5[33]0[30][40][13][36][25][15][32][32][28][15]1[30][29][29][15]3[18][18][34][30][38]21[34][17][30][26][20][32][24][19][33]4[11]70[17][26]03[32][18]40[29][22][35][29][29][36][30][37]2[20][20][37]17[37][23][38][39]78[33]46[37][33]5[39][19][15]92[27][28][14]5[20][39][20][15][21][39][25]7[25][34][18][32]0[28][15][28][22][32]2[31]9[27][24][22]8[20]3[32][20][33][25][15]7[10][10][16][32]9[38][27][16][39][10][21][10][38][33]8[20][39][32][27]926[18]3[25][10][21][14]3[17][10][38][39][39]6[34][22][16]57[21][38][21][29][28][38][35]0[17][39][19][34][24]5[26][17][13][23][33][16][25]4[31][30][40][40][10][16][15][22][19]36[35]1[30][18][40]519[39]0[36][27]65[33][32][11][12][12][23]7[40][36][35]2[12][20]3[14][40][17]3[22]9204[17][31][24][28][23][24][33]3[10][18][20][24][38][38][31][37][30]3[15][40][40]7[25]5[35][40][30][34]4[17][20][35][11][11]88[23][30]7[18][11][13][32][37][26][29][23][23][13][13][27][11][15][13][32][19][22]3[34][19][19][37][15]7[10]2[37][15][36]2[26][17][27]35[27]4[16][27][37][29]2[36][23][26]1[25][31][35][39][38][33][34][19]3[38][17][39]9[37][11][31]5[32][14][26][19][21][12]2[10]7[33]50[19]27[29][29][25][31]49[23][22][40][17][33][33][30][15]66[34][34][39][36]8[25][37][10][14][38][38][32][12]021[40][20]1[25]8[36][34][33][27][27]6[15][26][27][18][14][15]7[28]7[12][10]8[24][30]2[24][40]6[13][36][21][20][38]183[20][19]3[29][27][27][16]5[35][16][35]17[23][16][28]11[27]9[15][25][36]1[39][32][37][34][19][14][33][22][37]9[34][29][25]4[28][35][28][20][35][33][21][26][35][40][14]3[26][36][35][16]9[36][36][30][13][22][20][12]848[33]2[10]4[28][14][14][17]80[19]4[26]4[31][20][33][33][18][28][15][19][35][40][24][35]9[23]8[38]25[40][31][33][35][35][35]01[17]7[32][36][37][10][20]3[33]4[12][12][23][20][22][13][33][27][23][34][37][18][30][31][26][37][19][34]92[24][21][16][27]6[36][14][17][24][13][13][16][34]5[39]0[37][34]0[24]9[35][13]4[14][14][31]2[14][24][28][11][25]3[14]61[25][15]3[11]1[27][13][14][21]5[33][11][18][24][31][19][11][15][32][12][21]2[11][28]1[28][18][29][10][33][31][15]5[12][40]9[31][10][38][16][12][24][30]9[40]4[12][31][21][36][18][26][38][35]1[36][11]9[31][25][32][29][13][10]9[37][38][32][20][28][21][11][15][37][30][33][10][25][13]6[36][39][31]7[38][34][34][38][15]5[25][27][36][12]8[33][18][15]77[18][30][36][39]9[16][13][26][38][10][38]63[40][30][22]8[28][40]9874[18][28][11][39][25][31][34]67[13][32]1[11]8[27]0[11][21][34][23][29][36][15]91[26][24][16][30][38]0[32]8[27][11][24][13]27[17][16][26]404[28][33][20][11][36][14][35][26][19][37]856[11][31][29][29][14][15][10][28][34][20]9[30][21]84[23][23][27][29][14][40][40][40][11]3[18][14][20]10[27][39]46906[15][18]0[10]2[17][31][37][37][18]32[18]4[40][32][37][37][32]0[35][32][22]6[19]34[28][13]1[29][16][28][39][14][29][23][10][17][34][18][28][17]8[39]49[26]06[19][20][26][16][18]13[14]6[38][20][32][30][13]061[23][40]1[14]1[25]7[33][31]84[31][26][27]7[21][26]4[37][24][23]99[17][23][21][23][31][17][23][23][24]7[23][15][25][11][17]27[23][38][31][10][29]9[18][36][19][25]2[17]2[35]2[15][15][16][20][10][39]1[22][35][26][36]9[10]2[20][17]4[13][39]0[17][13][23][18][12]6[19][18][21]6[10][40][32][22][22][15][21][40][37][16][39]2[30]8[25][12][20][11]8[22][34][16]'

DominosaSolver().solve(puzzle_ultra)