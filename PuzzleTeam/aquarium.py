from solver import GridSolver, BinaryGridState

class AquariumSolver(GridSolver):

    def solve(self, puzzle):
        totals, regions = puzzle.split(";")
        totals = [int(num) for num in totals.split("_")]
        width = height = len(totals) // 2
        self.column_totals, self.row_totals = totals[:width], totals[width:]
        self.decode_regions(regions, width, height)
        row_sets = [set() for i in self.get_all_region_points()]
        column_sets = [set() for i in self.get_all_region_points()]
        self.row_set_list = [[0 for x in range(width)] for y in range(height)]
        self.column_set_list = [[0 for x in range(width)] for y in range(height)]
        for i,r in enumerate(self.get_all_region_points()):
            for x, y in r:
                row_sets[i].add(y)
                column_sets[i].add(x)
                self.row_set_list[y][x] = row_sets[i]
                self.column_set_list[y][x] = column_sets[i]
        self.solve_recursive(BinaryGridState([[0 for x in range(width)] for y in range(height)], 0, 0))
        
    def get_next_states(self, state):
        states = []
        region = self.get_region_points(state.x, state.y)
        min_height = min([y for x, y in region])
        max_height = max([y for x, y in region])
        new_state = BinaryGridState(state.grid, state.x, state.y)
        for x, y in region:
            new_state.set(x, y, 1)
        if self.check_rows_columns(new_state, new_state.x, new_state.y):
            states.append(new_state)
        for height in range(min_height, max_height + 1):
            new_state = BinaryGridState(new_state.grid, state.x, state.y)
            for x, y in region:
                if height == y:
                    new_state.set(x, y, -1)
            if self.check_rows_columns(new_state, new_state.x, new_state.y):
                states.append(new_state)
        return states

    def check_rows_columns(self, state, x, y):
        for Y in self.row_set_list[y][x]:
            row = self.get_row(state, Y)
            total_water = row.count(1)
            total_space = row.count(-1)
            if total_water > self.row_totals[Y] or total_space > len(row) - self.row_totals[Y]:
                return False
        for X in self.column_set_list[y][x]:
            column = self.get_column(state, X)
            total_water = column.count(1)
            total_space = column.count(-1)
            if total_water > self.column_totals[X] or total_space > len(column) - self.column_totals[X]:
                return False
        return True

puzzle_easy = '2_4_1_1_3_3_1_1_2_2_3_5;1,2,3,4,5,5,1,2,3,4,6,7,8,8,9,10,10,7,11,11,9,9,12,12,13,13,14,15,16,17,18,18,14,15,16,17'
#6x6 Hard - ID: 2199505

puzzle_medium = '5_7_6_5_7_10_8_10_12_10_8_8_3_5_1_3_10_5_8_10_7_5_5_5_4_3_8_9_10_13;1,1,1,2,2,2,3,3,4,4,4,4,5,5,6,7,1,8,8,2,3,3,4,4,9,9,4,5,6,6,7,10,11,12,12,13,13,13,9,9,9,14,14,14,15,7,10,11,11,16,13,13,9,9,17,17,17,14,17,15,11,10,11,16,16,13,13,18,18,18,18,17,17,17,15,11,11,11,11,16,19,19,19,19,18,20,20,15,15,15,11,21,21,11,11,22,23,24,18,18,25,25,15,26,26,21,21,11,11,11,22,23,24,18,18,25,25,15,15,26,27,27,28,23,23,23,23,24,24,24,29,25,25,15,26,27,27,28,28,28,28,30,30,30,24,29,29,25,26,26,31,27,32,32,33,33,33,30,34,35,35,29,36,26,26,31,37,38,32,33,33,33,34,34,35,29,29,36,36,26,31,37,38,39,39,40,40,41,35,35,42,42,36,36,26,31,38,38,39,43,43,40,41,41,41,44,45,45,26,26,38,38,39,39,41,41,41,41,41,44,44,45,45,26,26'
#15x15 Hard - ID: 3002029

puzzle_hard = '15_16_16_16_16_10_9_13_13_16_15_15_12_16_17_14_13_10_15_7_8_10_18_13_16_19_11_18_15_17_14_7_12_11_8_11_15_17_16_18;1,1,2,2,2,2,3,3,4,4,5,6,6,6,6,6,6,6,6,7,1,2,2,8,9,2,3,4,4,4,5,6,6,10,10,7,6,6,6,7,1,1,8,8,9,11,3,3,4,5,5,5,10,10,10,7,6,7,7,7,1,1,8,11,11,11,11,3,4,4,12,12,12,13,13,7,7,7,7,14,1,8,8,11,11,15,11,11,11,12,12,13,13,13,16,16,16,7,7,14,1,1,8,17,17,15,11,11,11,12,13,13,13,18,18,16,7,7,7,14,1,19,17,17,15,15,20,11,20,12,12,13,21,18,21,22,23,23,14,14,1,19,19,24,15,24,20,20,20,21,21,21,21,21,21,22,22,23,14,14,1,25,25,24,24,24,26,27,20,21,28,21,28,21,29,29,22,22,14,30,31,31,31,24,32,33,26,27,27,21,28,28,28,28,34,22,22,22,14,30,31,31,32,32,32,33,26,27,27,27,28,28,35,28,34,22,36,30,30,30,37,38,32,38,33,33,26,27,27,27,35,35,35,39,39,39,36,36,30,30,37,38,38,38,38,33,33,33,40,40,41,41,35,42,42,39,39,36,30,30,37,43,43,38,33,33,33,41,41,41,41,35,35,39,42,39,36,36,30,36,37,43,43,43,44,44,33,45,45,45,45,46,46,39,39,39,47,36,30,36,37,43,43,43,44,44,45,45,46,46,46,46,46,48,39,49,47,36,36,36,37,37,43,50,50,50,45,46,46,48,48,46,48,48,49,49,49,51,52,53,43,43,43,50,50,50,45,45,45,48,48,46,48,48,49,51,51,51,52,53,43,43,50,50,54,55,56,56,45,48,46,46,48,48,49,49,51,51,51,51,43,43,50,50,54,55,48,48,48,48,48,48,48,51,51,51,51,57,57,51'
#20x20 Daily Puzzle - 10/05/20

puzzle_ultra = '22_21_19_17_19_17_21_22_17_24_24_22_26_24_26_23_18_18_21_21_17_14_16_16_16_14_14_20_20_23_3_21_27_23_22_13_15_16_17_14_17_19_19_15_12_22_11_11_17_17_23_22_28_29_29_29_25_25_27_24;1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,4,4,4,4,4,4,5,5,5,6,6,6,6,6,1,1,1,1,7,7,7,7,7,7,7,2,8,9,9,3,3,3,3,3,4,5,5,5,6,6,6,6,10,6,1,1,1,1,1,7,7,7,11,7,2,2,8,8,9,3,3,4,4,3,4,5,5,4,4,4,6,6,10,10,1,1,1,12,12,7,7,7,11,11,11,13,13,8,9,8,14,15,4,3,4,5,4,4,4,6,6,10,10,10,1,1,1,12,12,11,11,11,11,11,13,13,8,8,8,8,14,15,4,4,4,4,4,16,16,6,16,10,10,17,1,12,12,12,12,12,11,18,11,19,13,8,8,8,8,14,14,14,14,4,14,14,14,14,16,16,16,16,17,17,20,20,20,12,21,12,12,18,11,19,13,8,22,22,8,8,8,8,14,14,14,16,16,14,14,14,16,16,17,17,20,12,12,12,21,12,12,11,11,11,13,8,8,22,8,22,22,14,14,16,16,16,16,16,16,16,16,16,16,23,20,12,20,21,21,21,21,24,11,11,22,22,22,22,22,22,25,25,14,14,26,26,26,26,16,16,23,23,16,23,20,20,20,24,24,24,24,24,11,11,22,27,27,27,22,22,25,25,25,14,28,26,16,16,16,16,16,23,16,23,20,20,20,24,20,24,27,27,27,27,27,27,27,27,27,22,22,25,25,25,28,26,16,26,26,16,16,23,16,23,20,29,20,20,20,24,27,30,30,30,30,27,31,31,31,22,22,22,25,28,28,26,26,26,26,26,16,23,23,23,29,29,20,20,20,24,27,27,32,30,30,27,27,27,31,22,22,25,25,26,28,26,26,33,26,26,16,23,23,23,29,29,29,20,20,24,29,27,32,32,30,30,30,31,31,31,25,25,25,26,26,26,33,33,16,16,16,16,33,23,34,34,29,20,29,29,29,29,32,35,35,30,30,35,31,31,25,36,25,25,25,26,33,33,33,33,33,16,33,23,34,34,29,29,29,37,29,29,32,35,35,35,35,35,25,25,25,36,25,26,26,26,26,26,26,38,33,33,33,33,34,34,29,34,37,37,32,32,32,35,35,39,39,39,25,40,36,36,25,26,41,26,38,38,26,38,38,38,33,33,34,34,34,34,37,37,32,42,32,32,35,39,39,39,25,40,36,25,25,36,41,41,38,38,38,38,38,43,43,33,34,34,37,37,37,32,32,42,42,32,35,39,39,39,39,40,36,36,36,36,36,41,41,41,38,43,43,43,43,33,34,34,37,37,37,32,32,32,42,32,42,42,39,40,40,40,40,40,36,36,41,41,38,38,38,38,38,38,43,33,34,34,34,37,37,37,37,37,42,32,42,42,39,40,40,36,36,36,36,36,36,41,41,44,44,38,43,43,43,33,34,34,34,34,34,37,42,37,42,42,42,42,39,40,40,40,40,36,45,46,46,46,41,44,44,38,43,44,43,33,34,34,37,37,37,37,42,37,42,47,47,48,39,40,48,40,45,45,45,46,46,41,41,44,44,44,44,44,43,43,34,37,37,49,37,37,42,42,42,47,47,48,39,39,48,40,45,45,45,45,46,46,41,44,50,50,44,44,43,43,34,49,49,49,37,37,42,49,47,47,48,48,39,39,48,40,45,51,45,45,46,52,41,52,52,50,44,44,44,43,34,49,53,49,37,37,49,49,47,54,54,48,48,39,48,48,45,51,45,45,46,52,52,52,52,52,55,55,44,56,53,49,53,49,49,49,49,49,47,54,54,48,48,48,48,48,45,51,45,45,46,46,46,52,57,57,57,58,58,56,53,53,53,53,49,53,49,49,47,47,54,48,54,54,48,45,45,51,45,46,46,46,46,52,57,58,58,58,58,56,53,53,49,49,49,53,47,47,47,47,54,54,54,48,48,48,51,51,45,45,46,52,52,52,57,57,57,57,58,58,53,53,53,53,53,53,47,47,47,47,59,59,59,59,59,59,51,51,60,60,60,60,60,58,58,58,58,58,58,58'
#30x30 Monthly Puzzle - 10/01/20

AquariumSolver().solve(puzzle_medium)


        
    